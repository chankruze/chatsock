// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  name   String
  avatar String @db.Text
  email  String @unique
  bio    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  icon       String    @db.Text
  inviteCode String    @unique
  ownerId    String
  owner      Profile   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId], name: "ownerId")
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

model Member {
  id   String     @id @default(cuid())
  role MemberRole @default(MEMBER)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages               Message[]
  conversationsInitiated Conversation[]  @relation("ParticipantOne")
  conversationsReceived  Conversation[]  @relation("ParticipantTwo")
  directMessages         DirectMessage[]

  @@index([profileId], name: "profileId")
  @@index([serverId], name: "serverId")
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  creatorId String
  creator   Profile @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([creatorId], name: "creatorId")
  @@index([serverId], name: "serverId")
}

model Message {
  id        String  @id @default(cuid())
  content   String  @db.Text
  fileUrl   String? @db.Text
  isDeleted Boolean @default(false)

  senderId String
  sender   Member @relation(fields: [senderId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId], name: "senderId")
  @@index([channelId], name: "channelId")
}

model Conversation {
  id String @id @default(cuid())

  participantOneId String
  participantOne   Member @relation("ParticipantOne", fields: [participantOneId], references: [id], onDelete: Cascade)

  participantTwoId String
  participantTwo   Member @relation("ParticipantTwo", fields: [participantTwoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directMessages DirectMessage[]

  @@unique([participantOneId, participantTwoId])
  @@index([participantOneId], name: "participantOneId")
  @@index([participantTwoId], name: "participantTwoId")
}

model DirectMessage {
  id        String  @id @default(cuid())
  content   String  @db.Text
  fileUrl   String? @db.Text
  isDeleted Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId], name: "memberId")
  @@index([conversationId], name: "conversationId")
}
